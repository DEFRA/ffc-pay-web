{% extends '_layout.njk' %}
{% from "govuk/components/breadcrumbs/macro.njk" import govukBreadcrumbs %}
{% block content %}
  {{ govukBreadcrumbs({
    items: [
      {
        text: "Home",
        href: "/"
      },
      {
        text: "Report List",
        href: "/report-list"
      },
      {
        text: reportTitle,
        href: reportUrl
      },
      {
        text: "Report Preparation",
        href: "#",
        attributes: {
          'aria-disabled': 'true', 
          'class': 'govuk-breadcrumbs__link--disabled' 
        }
      }
    ]
  }) }}
  <h1 class="govuk-heading-l">Preparing your report</h1>

  <section id="progress-container" class="govuk-notification-banner govuk-notification-banner--info" aria-labelledby="progress-status-heading">
    <div class="govuk-notification-banner__header">
      <h2 class="govuk-notification-banner__title" id="progress-status-heading">
        Please wait
      </h2>
    </div>
    <div class="govuk-notification-banner__content">
      <p class="govuk-body" id="progress-status-text">Weâ€™re preparing your report. This can take a few minutes for large datasets.</p>
      <output class="govuk-spinner" aria-live="polite">
        <span class="govuk-visually-hidden">Loading</span>
      </output>
    </div>
  </section>

  <div id="error-message" class="govuk-error-summary" hidden>
    <h2 class="govuk-error-summary__title">
      There was a problem
    </h2>
    <div class="govuk-error-summary__body">
      <p class="govuk-body">We were unable to generate your report. Please try again later or contact support.</p>
    </div>
  </div>

  <iframe id="download-frame" style="display: none;" title="Report download frame"></iframe>

  <script>
    const jobId = "{{ jobId }}"
    const checkUrl = `/report-list/generation/status/${jobId}`
    const downloadUrl = `/report-list/generation/download/${jobId}`

    let pollStartTime = null

    function startTimer() {
      pollStartTime = Date.now()
    }

    function stopTimer() {
      const elapsed = Math.floor((Date.now() - pollStartTime) / 1000)
      console.log(`Report process completed in ${elapsed}s`)
    }

    let downloadStarted = false

function checkStatus() {
  fetch(checkUrl)
    .then(res => {
      if (!res.ok) throw new Error('Status check failed')
      return res.json()
    })
    .then(data => {
      const progressContainer = document.getElementById('progress-container')
      const progressStatusText = document.getElementById('progress-status-text')
      const spinner = document.querySelector('.govuk-spinner')

      console.log(data.status)

      if (data.status === 'ready') {
        if (!downloadStarted) {
          progressStatusText.textContent = 'The report is ready and will begin downloading to your device. Please note larger files may take longer to finish.'

          const iframe = document.getElementById('download-frame')
          iframe.src = downloadUrl

          downloadStarted = true 
        }

        setTimeout(checkStatus, 4000)

      } else if (data.status === 'completed') {
        progressStatusText.textContent = 'Your report has been successfully downloaded. You may now close this window.'

        progressContainer.classList.remove('govuk-notification-banner--info')
        progressContainer.classList.add('govuk-notification-banner--success')
        spinner.style.display = 'none'
        stopTimer()

      } else if (data.status === 'failed') {
        showError()

      } else {
        setTimeout(checkStatus, 4000)
      }
    })
    .catch(showError)
}

    function showError() {
      document.getElementById('progress-container').hidden = true
      document.getElementById('error-message').hidden = false
    }

    document.addEventListener('DOMContentLoaded', checkStatus)
    startTimer()
  </script>
{% endblock %}
