{% extends 'report-list/base-report.njk' %}
{% from 'macros/report-form-fields.njk' import reportPageTitle, typeSelect %}
{% from "govuk/components/task-list/macro.njk" import govukTaskList %}

{% set showSubmitButton = govukTaskListData == null %}

{% set reportTitle = 'Payment Statement Status' %}
{% set reportSubmitLabel = 'Find Reports' %}
{% set reportUrl = '/report-list/status-report' %}
{% set formAction = '/report-list/status-report/search' %}
{% set pdfDownloadLink = '/report-list/status-report/download?file-name=' + 'reports/DS1-Statement Status Report-170725-100746.pdf' | urlencode %}

{% set reportTypeItems = [
  { value: "sustainable-farming-incentive", text: "SFI-23" },
  { value: "delinked-payment-statement", text: "Delinked" }
] %}

{% block reportContent %}
  {{ reportPageTitle(reportTitle) }}

  <p class="govuk-body">
    Statement Status Reports are automatically generated by the Documents Service to track and confirm the delivery status of Scheme Payment Statements to customers. Until now, this was done manually by checking the status within 
    <a class="govuk-link" href="https://www.notifications.service.gov.uk/" target="_blank" rel="noopener noreferrer">
      GOV.UK Notify
    </a>. This automated solution ensures that we can still share this key business information as we scale. You can find full details of the report design in the 
    <a class="govuk-link" href="{{ pdfDownloadLink }}" target="_blank" rel="noopener noreferrer">
      Statement Status Report Guidance (PDF)
    </a>.
  </p>

  {{ typeSelect(reportType, reportTypeItems, "Select a scheme") }}

    <div class="govuk-form-group">
      <label class="govuk-label govuk-label-s" for="report-year">Select the year</label>
      <select class="govuk-select" id="report-year" name="report-year">
        {% for year in years %}
          <option value="{{ year.year }}" data-type="{{ year.type }}">{{ year.year }}</option>
        {% else %}
          <option value="" disabled>No reports available</option>
        {% endfor %}
      </select>
    </div>

<script>
  const typeSelect = document.getElementById('select-type');
  const reportYearSelect = document.getElementById('report-year');
  function filterYears() {
    const selectedType = typeSelect.value;
    for (const option of reportYearSelect.options) {
      if (!option.value) continue;
      option.hidden = option.dataset.type !== selectedType;
    }
    reportYearSelect.value = '';
    const firstVisible = Array.from(reportYearSelect.options).find(opt => !opt.hidden && opt.value);
    if (firstVisible) reportYearSelect.value = firstVisible.value;
  }
  if (typeSelect) {
    typeSelect.addEventListener('change', filterYears);
    filterYears();
  }
</script>
{% endblock %}
