{% extends 'report-list/base-report.njk' %}
{% from 'macros/report-form-fields.njk' import reportPageTitle, typeSelect %}
{% from "govuk/components/task-list/macro.njk" import govukTaskList %}

{% set showSubmitButton = govukTaskListData == null %}

{% set reportTitle = 'Payment statement status report' %}
{% set reportSubmitLabel = 'Find Reports' %}
{% set reportUrl = '/report-list/status-report' %}
{% set formAction = '/report-list/status-report/search' %}
{% set pdfDownloadLink = '/report-list/status-report/download?file-name=' ~ 'reports/DS1-Statement Status Report-170725-100746.pdf' | urlencode %}

{% block reportContent %}
  {{ reportPageTitle(reportTitle) }}

  <p class="govuk-body">
    Payment statement status reports are automatically generated by the Documents Service to track and confirm the delivery status of Scheme Payment Statements to customers. You can find full details of the report design in the 
    <a class="govuk-link" href="{{ pdfDownloadLink }}" target="_blank" rel="noopener noreferrer">
      Statement Status Report Guidance (PDF)
    </a>.
  </p>

  {{ typeSelect(reportType, reportTypeItems, "Select a scheme") }}

    <div class="govuk-form-group">
      <label class="govuk-label govuk-label-s" for="report-year">Select the year</label>
      <select class="govuk-select" id="report-year" name="report-year">
        {% for item in yearTypeItems %}
          <option value="{{ item.year }}" data-type="{{ item.type }}">{{ item.year }}</option>
        {% else %}
          <option value="" disabled>No reports available</option>
        {% endfor %}
      </select>
    </div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const typeSelect = document.getElementById('select-type')
    const reportYearSelect = document.getElementById('report-year')
    const reportSubmit = document.getElementById('report-submit')

    function filterYears() {
      const selectedType = typeSelect.value
      let hasVisibleOption = false

      // Filter reportYear options based on selected report type
      for (const option of reportYearSelect.options) {
        if (!option.value) continue
        const match = option.dataset.type === selectedType
        option.hidden = !match
        if (match) hasVisibleOption = true
      }

      // Remove all existing 'no-reports' placeholder options
      const existingPlaceholders = reportYearSelect.querySelectorAll('option.no-reports')
      existingPlaceholders.forEach(opt => reportYearSelect.removeChild(opt))

      if (hasVisibleOption) {
        // Select first visible option
        const firstVisible = Array.from(reportYearSelect.options).find(opt => !opt.hidden && opt.value)
        reportYearSelect.value = firstVisible?.value || ''
        reportYearSelect.disabled = false
        reportSubmit.disabled = false
      } else {
        // Add 'No reports available' option
        const noReportsOption = document.createElement('option')
        noReportsOption.text = 'No reports available'
        noReportsOption.selected = true
        noReportsOption.classList.add('no-reports')
        reportYearSelect.appendChild(noReportsOption)
        reportYearSelect.disabled = true
        reportSubmit.disabled = true
      }
    }

    if (typeSelect && reportYearSelect && reportSubmit) {
      typeSelect.addEventListener('change', filterYears)
      filterYears()
    }
  })
</script>
{% endblock %}
